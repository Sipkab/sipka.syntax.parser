global(VERSION_sipka.syntax.parser) = "0.8.2"

static(VERSION_saker.build) = nest.dependency.resolve(
	saker.build,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]
static(VERSION_saker.nest) = nest.dependency.resolve(
	saker.nest,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]

compile(
	out libjavac,
	out mainjavac,
) {
	$libjavac = saker.java.compile(
		SourceDirectories: lib/src,
		Identifier: lib,
		SourceVersion: 8,
		TargetVersion: 8,
		Parameters: [--release, 8,]
	)
	$mainjavac = saker.java.compile(
		SourceDirectories: main/src,
		ClassPath: [
			$libjavac,
			saker.java.classpath.bundle([
				"saker.build-api-v{ static(VERSION_saker.build) }",
				"saker.nest-api-v{ static(VERSION_saker.nest) }",
			])
		],
		Identifier: main,
		SourceVersion: 8,
		TargetVersion: 8,
		Parameters: [--release, 8,]
	)
	
}
export(
	out compile = include(compile),
	out mainjar,
	out sourcejar,
	out libjar,
	
	out bundlepaths = [
		$mainjar[Path],
		$libjar[Path],
		$sourcejar[Path],
	]
){
	$mainjar = saker.jar.create(
		Output: sipka.syntax.parser.jar,
		Resources: [
			{
				Resources: **/*.class, 
				Directory: $compile[mainjavac][ClassDirectory],
			},
			{
				Directory: main/resources/,
				Resources: **
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "sipka.syntax.parser-v{ global(VERSION_sipka.syntax.parser) }",
				Nest-Bundle-Source: "sipka.syntax.parser-sources-v{ global(VERSION_sipka.syntax.parser) }",
			},
		},
	)
	$libjar = saker.jar.create(
		Output: sipka.syntax.parser-lib.jar,
		Resources: [
			{
				Resources: **/*.class, 
				Directory: $compile[libjavac][ClassDirectory],
			},
			{
				Directory: lib/resources/,
				Resources: **
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "sipka.syntax.parser-lib-v{ global(VERSION_sipka.syntax.parser) }",
				Nest-Bundle-Source: "sipka.syntax.parser-sources-v{ global(VERSION_sipka.syntax.parser) }",
			},
		},
	)
	$sourcejar = saker.jar.create(
		Output: sipka.syntax.parser-sources.jar,
		Resources: [
			{
				Directory: [main/src, lib/src/],
				Resources: **/*.java,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "sipka.syntax.parser-sources-v{ global(VERSION_sipka.syntax.parser) }",
			},
		},
	)
}
install(){
	$export = include(export)
	nest.local.install(Bundle: $export[bundlepaths])
}
upload(){
	$export = include(export, Path: saker.build)
	include(Path: secret/secrets.build)
	nest.server.upload(
		Bundles: $export[bundlepaths],
		APIKey: global(sipka.syntax.parser.UPLOAD_API_KEY),
		APISecret: global(sipka.syntax.parser.UPLOAD_API_SECRET),
		Overwrite: true,
	)
}

test(){
	$export = include(export)
	$compile = $export[compile]
	
	$instrumentedjar = nest.test.instrument(
		nest.bundle.download("saker.build-test-v{ static(VERSION_saker.build) }")[BundlePaths][0],
		NestVersion: static(VERSION_saker.nest),
	)
	
	$testcompile = saker.java.compile(
		SourceDirectories: test/src/,
		ClassPath: [
			$compile[libjavac][ClassDirectory],
			$instrumentedjar,
			saker.java.classpath.bundle([
				"saker.build-test-runner-v{ static(VERSION_saker.build) }",
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
				"saker.nest-test-utils-v{ static(VERSION_saker.nest )}"
			]),
		],
		Identifier: tests
	)
	
	$resolveddependencies = nest.dependency.resolve(
		Bundles: [saker.java.compiler],
		Filters: nest.dependency.filter.kind(classpath)
	)
	
	saker.java.test(
		TestRunnerClassPath: [
			saker.java.classpath.bundle("saker.build-test-runner-v{ static(VERSION_saker.build) }"),
		],
		ClassPath: $compile[libjavac],
		TestInvokerClass: testing.saker.SakerJavaTestingInvoker,
		TestClassPath: [
			$testcompile[ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
			]),
		],
		TestClasses: [
			testing.sipka.**.*Test
		],
		NonDeterministicTests: **,
		TestInvokerParameters: {
			TimeoutMillis: 120000,
		},
		MaxJVMCount: 1,
		FailFast: true,
		AbortOnFail: true,
		Verbose: true,
	)
	
	saker.java.test(
		TestRunnerClassPath: [
			saker.java.classpath.bundle("saker.build-test-runner-v{ static(VERSION_saker.build) }"),
		],
		ClassPath: [
			$instrumentedjar,
		],
		DependencyClassPath: [
			$export[compile][libjavac],
		],
		TestInvokerClass: testing.saker.SakerJavaTestingInvoker,
		TestClassPath: [
			$testcompile[ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
				"saker.nest-test-utils-v{ static(VERSION_saker.nest )}",
			]),
		],
		TestClasses: [
			testing.saker.**.*Test
		],
		NonDeterministicTests: **,
		TestClassParameters: {
			**: {
				RepositoryJarPath: nest.bundle.localize("saker.nest-test-v{ static(VERSION_saker.nest) }")[BundleLocalPaths][0],
				RepositoryParameterBundles: "{ 
						foreach $path in $export[bundlepaths]: "{ std.file.mirror($path) };"  
					};{
						foreach $path in nest.bundle.localize($resolveddependencies)[BundleLocalPaths]: ";{ $path }"
					}",
				SyntaxParserVersion: global(VERSION_sipka.syntax.parser),
				SyntaxParserExportPath: std.file.mirror($export[libjar][Path]),
			}
		},
		TestInvokerParameters: {
			SakerJarPath: std.file.mirror($instrumentedjar),
			TimeoutMillis: 120000,
			TestsBaseBuildDirectory: std.file.mirror.path(std.file.place(test/build)),
		},
		MaxJVMCount: 1,
		FailFast: true,
		AbortOnFail: true,
		Verbose: true,
	)
}